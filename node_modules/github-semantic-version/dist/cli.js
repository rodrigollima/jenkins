#!/usr/bin/env node
"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _meow = require("meow");

var _meow2 = _interopRequireDefault(_meow);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _Version = require("./Version");

var _Version2 = _interopRequireDefault(_Version);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cli = (0, _meow2.default)("\n  Usage:\n    $ github-semantic-version\n\n  Options:\n    --init        Generates a new changelog and updates the current version in package.json.\n    --bump        Bump the version in package.json based on the last change.\n    --changelog   Bump the version in package.json AND append last change to the CHANGELOG.md.\n    --push        Commits and pushes the changes (version and CHANGELOG) to the repo.\n    --publish     Commits and pushes the changes to the repo, AND publishes the latest to NPM.\n    --branch      (Default: master) Release branch, others are ignored.\n    --force       By default, --bump and --changelog only work in CI environment. Override this only if you know what you're doing!\n    --check       Check and validate a pull request has an associated label.\n    --dry-run     Perform a dry-run without writing, commiting, pushing, or publishing.\n\n    debug:        Prepend DEBUG=github-semantic-version:* to the github-semantic-version command.\n", {

  default: _Version2.default.defaultOptions
});

// we really need a GH_TOKEN or GITHUB_TOKEN b/c api request limiting
if (!(process.env.GH_TOKEN || process.env.GITHUB_TOKEN)) {
  console.error("Either a GITHUB_TOKEN or GH_TOKEN environment variable is required to interact with the Github API.");
  process.exit(1);
}

// if the user is publishing to NPM, they need an NPM_TOKEN
if (cli.flags.publish && !process.env.NPM_TOKEN) {
  console.error("If specifying --publish, the NPM_TOKEN environment variable needs to be set.");
  process.exit(1);
}

var validEnvironment = process.env.CI || cli.flags.force || cli.flags.dryRun;
var hasRequiredFlags = cli.flags.bump || cli.flags.changelog;

var packageOptions = _Utils2.default.getOptionsFromFile("./package.json");
var configOptions = packageOptions.gsv || _Utils2.default.getOptionsFromFile("./gsv.json") || _Utils2.default.getOptionsFromFile("./.gsvrc");

if (!configOptions || !(configOptions.majorLabel && configOptions.minorLabel && configOptions.patchLabel && configOptions.internalLabel)) {
  console.error("Must specify version label config options in .gsvrc, gsv.json file, or a gsv package.json entry.\n    Ex:\n    {\n      \"majorLabel\": \"Version: Major\",\n      \"minorLabel\": \"Version: Minor\",\n      \"patchLabel\": \"Version: Patch\",\n      \"internalLabel\": \"No version: Internal\"\n    }\n  ");
  process.exit(1);
}

var versionOptions = (0, _extends3.default)({
  version: packageOptions.version,
  private: packageOptions.private || false,
  name: packageOptions.name
}, configOptions);

// run release only in CI environment. don't run complete changelog generation in CI.
if (validEnvironment && hasRequiredFlags || cli.flags.init || cli.flags.check) {
  var version = new _Version2.default(versionOptions, cli.flags);

  if (cli.flags.init) {
    version.refresh();
  } else if (cli.flags.check) {
    version.check();
  } else {
    version.release();
  }
} else if (validEnvironment && !hasRequiredFlags) {
  console.error("Must specify one of the following options: --init, --bump, or --changelog");
  cli.showHelp(1);
} else {
  console.error("Not in CI environment or incorrect usage.");
  cli.showHelp(1);
}